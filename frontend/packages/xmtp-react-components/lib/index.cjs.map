{"version":3,"sources":["../src/components/AddressInput.tsx","../src/components/Avatar.tsx","css-module:./Avatar.module.css#css-module","css-module:./ShortCopySkeletonLoader.module.css#css-module","../src/components/SkeletonLoaders/ShortCopySkeletonLoader.tsx","css-module:./AddressInput.module.css#css-module","css-module:./ConversationList.module.css#css-module","css-module:./ConversationPreviewCard.module.css#css-module","css-module:./IconSkeletonLoader.module.css#css-module","../src/components/SkeletonLoaders/IconSkeletonLoader.tsx","../src/components/ConversationList.tsx","../src/components/DateDivider.tsx","css-module:./DateDivider.module.css#css-module","../src/components/Messages.tsx","css-module:./MessageSkeletonLoader.module.css#css-module","../src/components/SkeletonLoaders/MessageSkeletonLoader.tsx","../src/components/Message.tsx","css-module:./Message.module.css#css-module","../src/components/MessageContent.tsx","../src/components/AttachmentContent.tsx","css-module:./Attachment.module.css#css-module","css-module:./MessageContent.module.css#css-module","../src/components/ReplyContent.tsx","../src/components/ReactionsBar.tsx","css-module:./ReactionsBar.module.css#css-module","../src/components/ReactionsContent.tsx","css-module:./ReactionsContent.module.css#css-module","css-module:./Messages.module.css#css-module","../src/components/IconButton.tsx","css-module:./ButtonLoader.module.css#css-module","../src/components/Loaders/ButtonLoader.tsx","css-module:./IconButton.module.css#css-module","../src/components/MessageInput.tsx","css-module:./MessageInput.module.css#css-module","../src/components/ConversationPreviewCard.tsx","../src/helpers/shortAddress.ts","../src/controllers/ConversationPreview.tsx","../src/controllers/ConversationPreviewList.tsx"],"names":["ChevronLeftIcon","InformationCircleIcon","forwardRef","useCallback","Blockies","Avatar_module_default","jsx","Avatar","url","isLoading","address","ShortCopySkeletonLoader_module_default","jsxs","ShortCopySkeletonLoader","lines","AddressInput_module_default","AddressInput","ariaLabel","resolvedAddress","subtext","avatarUrlProps","onChange","isError","label","onLeftIconClick","onTooltipClick","value","ref","handleChange","event","isResolvedAddress","ConversationList_module_default","ConversationPreviewCard_module_default","IconSkeletonLoader_module_default","IconSkeletonLoader","DefaultEmptyMessage","ConversationList","conversations","renderEmpty","format","DateDivider_module_default","DateDivider","date","isAfter","isBefore","isSameDay","Fragment","useMemo","getReadReceipt","MessageSkeletonLoader_module_default","MessageSkeletonLoader","incoming","ContentTypeId","ContentTypeReply","Message_module_default","ContentTypeText","ContentTypeAttachment","ContentTypeRemoteAttachment","useAttachment","Attachment_module_default","blobCache","getBlobURL","attachment","AttachmentContent","message","status","blobURL","MessageContent_module_default","MessageContent","isIncoming","isRepliedTo","contentType","content","useReply","ReplyContent","originalMessage","reply","replyMessage","useSendMessage","ContentTypeReaction","ReactionsBar_module_default","availableReactionEmojis","ReactionsBar","conversation","sendMessage","handleClick","emoji","useClient","useReactions","ReactionsContent_module_default","ReactionsContent","client","reactions","emojiReactions","reaction","acc","count","senderAddresses","emojiCount","hasReacted","Message","isRead","Messages_module_default","hasMessageReadAfter","messages","afterSent","readReceipt","Messages","clientAddress","outgoingMessages","_","idx","renderedDates","filteredMessages","lastRenderedDate","isOutgoing","isFirstMessage","isLastMessage","isSameDate","shouldDisplayDate","PlusCircleIcon","ButtonLoader_module_default","ButtonLoader","size","color","IconButton_module_default","IconButton","variant","isDisabled","srText","onClick","testId","useImperativeHandle","useState","useLayoutEffect","useRef","ArrowUpIcon","MessageInput_module_default","MIN_TEXTAREA_HEIGHT","MessageInput","onSubmit","placeholder","submitSrText","textAreaRef","setValue","handleKeyDown","currentScrollHeight","formatDistanceToNowStrict","getAttachment","shortAddress","addr","Link","ConversationPreviewCard","isSelected","lastMessage","ConversationPreview","handlePreviewClick","ConversationPreviewList","onConversationClick","selectedConversation","conversationPreviews"],"mappings":"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","sourcesContent":["import {\n  ChevronLeftIcon,\n  InformationCircleIcon,\n} from \"@heroicons/react/24/outline\";\nimport { forwardRef, useCallback } from \"react\";\nimport { Avatar } from \"./Avatar\";\nimport { ShortCopySkeletonLoader } from \"./SkeletonLoaders/ShortCopySkeletonLoader\";\nimport styles from \"./AddressInput.module.css\";\n\nexport type AddressInputProps = {\n  /**\n   * What, if any, ARIA label should be used for the text input\n   */\n  ariaLabel?: string;\n  /**\n   * What, if any, resolved address is there?\n   */\n  resolvedAddress?: {\n    displayAddress: string;\n    walletAddress?: string;\n  };\n  /**\n   * What, if any, subtext is there?\n   */\n  subtext?: string;\n  /**\n   * What are the props associated with the avatar?\n   */\n  avatarUrlProps?: {\n    // What is the avatar url?\n    avatarUrl?: string;\n    // Is the avatar url loading?\n    isLoading?: boolean;\n    // What's the address of this wallet?\n    address?: string;\n  };\n  /**\n   * What, if any, label should be used?\n   */\n  label?: string;\n  /**\n   * What happens on a submit?\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Upon submit, has there been an error?\n   */\n  isError?: boolean;\n  /**\n   * Upon submit, is something loading?\n   */\n  isLoading?: boolean;\n  /**\n   * Is there a tooltip click event that needs to be handled?\n   */\n  onTooltipClick?: () => void;\n  /**\n   * Input Value\n   */\n  value?: string;\n  /**\n   * Is there a left icon click event that needs to be handled?\n   */\n  onLeftIconClick?: () => void;\n};\n\nexport const AddressInput = forwardRef<HTMLInputElement, AddressInputProps>(\n  (\n    {\n      ariaLabel,\n      resolvedAddress,\n      subtext,\n      avatarUrlProps,\n      onChange,\n      isError,\n      isLoading,\n      label,\n      onLeftIconClick,\n      onTooltipClick,\n      value,\n    },\n    ref,\n  ) => {\n    const handleChange = useCallback<\n      React.ChangeEventHandler<HTMLInputElement>\n    >(\n      (event) => {\n        onChange?.(event.target.value);\n      },\n      [onChange],\n    );\n\n    const isResolvedAddress = !!resolvedAddress?.displayAddress;\n\n    return (\n      <div\n        className={`${styles.wrapper} ${\n          isResolvedAddress ? styles.resolved : \"\"\n        }`}>\n        {onLeftIconClick && (\n          <div className={styles.leftIcon}>\n            <ChevronLeftIcon onClick={onLeftIconClick} width={24} />\n          </div>\n        )}\n        <div className={styles.element}>\n          <div className={styles.label}>{label}</div>\n          <Avatar {...avatarUrlProps} />\n          <div className={styles.control}>\n            {isLoading ? (\n              <ShortCopySkeletonLoader lines={1} />\n            ) : resolvedAddress?.displayAddress ? (\n              <div className={styles.resolvedAddress}>\n                <span\n                  className={styles.displayAddress}\n                  data-testid=\"recipient-wallet-address\">\n                  {resolvedAddress.displayAddress}\n                </span>\n                {resolvedAddress.walletAddress && (\n                  <span className={styles.walletAddress}>\n                    {resolvedAddress.walletAddress}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <input\n                data-testid=\"message-to-input\"\n                tabIndex={0}\n                className={styles.input}\n                id=\"address\"\n                type=\"text\"\n                spellCheck=\"false\"\n                autoComplete=\"false\"\n                autoCorrect=\"false\"\n                autoCapitalize=\"off\"\n                onChange={handleChange}\n                value={value}\n                aria-label={ariaLabel}\n                ref={ref}\n              />\n            )}\n            <div\n              className={`${styles.subtext} ${isError ? styles.error : \"\"}`}\n              data-testid=\"message-to-subtext\">\n              {subtext}\n            </div>\n          </div>\n        </div>\n        {onTooltipClick && (\n          <InformationCircleIcon onClick={onTooltipClick} height=\"24\" />\n        )}\n      </div>\n    );\n  },\n);\n\nAddressInput.displayName = \"AddressInput\";\n","import Blockies from \"react-18-blockies\";\nimport styles from \"./Avatar.module.css\";\n\nexport type AvatarProps = {\n  /**\n   * Are we waiting on an avatar url?\n   */\n  isLoading?: boolean;\n  /**\n   * What, if any, avatar url is there?\n   */\n  url?: string;\n  /**\n   * What is the address associated with this avatar?\n   */\n  address?: string;\n};\n\nexport const Avatar: React.FC<AvatarProps> = ({ url, isLoading, address }) => {\n  if (isLoading) {\n    return <div className={styles.loading} />;\n  }\n\n  if (url) {\n    return <img className={styles.avatar} src={url} alt={address} />;\n  }\n\n  if (!address) {\n    return <div className={styles.avatar} />;\n  }\n\n  return (\n    <Blockies\n      data-testid=\"avatar\"\n      seed={address || \"\"}\n      scale={5}\n      size={8}\n      className={styles.blockies}\n    />\n  );\n};\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/Avatar.module.css\"; export default {\"loading\":\"_loading_652o7_6 pulse\",\"avatar\":\"_avatar_652o7_14\",\"blockies\":\"_blockies_652o7_21\"}","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/SkeletonLoaders/ShortCopySkeletonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_ng5ay_1 pulse\",\"element\":\"_element_ng5ay_6\",\"element1Line\":\"_element1Line_ng5ay_11\",\"element2Lines\":\"_element2Lines_ng5ay_16\"}","import styles from \"./ShortCopySkeletonLoader.module.css\";\n\nexport const ShortCopySkeletonLoader = ({ lines = 1 }) => (\n  <div role=\"status\" className={styles.wrapper}>\n    {lines === 1 ? (\n      <div className={`${styles.element} ${styles.element1Line}`} />\n    ) : (\n      <div className={styles.element2Lines}>\n        <div className={styles.element} />\n        <div className={styles.element} />\n      </div>\n    )}\n  </div>\n);\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/AddressInput.module.css\"; export default {\"wrapper\":\"_wrapper_82p7z_6\",\"resolved\":\"_resolved_82p7z_15\",\"element\":\"_element_82p7z_20\",\"label\":\"_label_82p7z_26 text-sm\",\"control\":\"_control_82p7z_32\",\"input\":\"_input_82p7z_40 text-md text-sm\",\"resolvedAddress\":\"_resolvedAddress_82p7z_54\",\"displayAddress\":\"_displayAddress_82p7z_62\",\"walletAddress\":\"_walletAddress_82p7z_67\",\"subtext\":\"_subtext_82p7z_73\",\"error\":\"_error_82p7z_80\",\"leftIcon\":\"_leftIcon_82p7z_90\"}","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/ConversationList.module.css\"; export default {\"loading\":\"_loading_1s609_6\",\"empty\":\"_empty_1s609_13\",\"wrapper\":\"_wrapper_1s609_18\"}","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/ConversationPreviewCard.module.css\"; export default {\"wrapper\":\"_wrapper_9fip8_1\",\"selected\":\"_selected_9fip8_10\",\"loading\":\"_loading_9fip8_14\",\"element\":\"_element_9fip8_18\",\"domain\":\"_domain_9fip8_26 text-sm\",\"address\":\"_address_9fip8_35 text-md\",\"message\":\"_message_9fip8_44 text-md\",\"time\":\"_time_9fip8_56 text-xs\"}","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/SkeletonLoaders/IconSkeletonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_2nuo1_1 pulse\",\"element\":\"_element_2nuo1_7\"}","import styles from \"./IconSkeletonLoader.module.css\";\n\nexport const IconSkeletonLoader = () => (\n  <div role=\"status\" className={styles.wrapper}>\n    <div className={styles.element} />\n  </div>\n);\n","import { Avatar } from \"./Avatar\";\nimport styles from \"./ConversationList.module.css\";\nimport previewStyles from \"./ConversationPreviewCard.module.css\";\nimport { IconSkeletonLoader } from \"./SkeletonLoaders/IconSkeletonLoader\";\nimport { ShortCopySkeletonLoader } from \"./SkeletonLoaders/ShortCopySkeletonLoader\";\n\nexport type ConversationListProps = {\n  /**\n   * What conversations should we render?\n   */\n  conversations?: React.ReactNode[];\n  /**\n   * Are we waiting on anything loading?\n   */\n  isLoading?: boolean;\n  /**\n   * What should we render when there are no conversations?\n   */\n  renderEmpty?: React.ReactNode;\n};\n\nconst DefaultEmptyMessage: React.FC = () => <div>No conversations!</div>;\n\nexport const ConversationList: React.FC<ConversationListProps> = ({\n  conversations = [],\n  isLoading,\n  renderEmpty = <DefaultEmptyMessage />,\n}) => {\n  if (isLoading && !conversations.length) {\n    return (\n      <div className={previewStyles.wrapper}>\n        <Avatar isLoading />\n        <div className={previewStyles.element}>\n          <ShortCopySkeletonLoader lines={2} />\n        </div>\n        <IconSkeletonLoader />\n      </div>\n    );\n  }\n\n  if (!conversations.length && !isLoading) {\n    return <div className={styles.empty}>{renderEmpty}</div>;\n  }\n\n  return (\n    <div className={styles.wrapper} data-testid=\"conversations-list-panel\">\n      {conversations}\n    </div>\n  );\n};\n","import { format } from \"date-fns\";\nimport styles from \"./DateDivider.module.css\";\n\nexport type DateDividerProps = {\n  /**\n   * What date should be displayed in the divider?\n   */\n  date: Date;\n};\n\nexport const DateDivider: React.FC<DateDividerProps> = ({ date }) => (\n  <div className={styles.wrapper}>\n    <div className={styles.date} title={date.toDateString()}>\n      {format(date, \"PPP\")}\n    </div>\n  </div>\n);\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/DateDivider.module.css\"; export default {\"wrapper\":\"_wrapper_gcqk3_1\",\"date\":\"_date_gcqk3_16\"}","import { isAfter, isBefore, isSameDay } from \"date-fns\";\nimport { Fragment, useMemo } from \"react\";\nimport {\n  getReadReceipt,\n  type CachedConversation,\n  type CachedMessage,\n} from \"@xmtp/react-sdk\";\nimport { MessageSkeletonLoader } from \"./SkeletonLoaders/MessageSkeletonLoader\";\nimport { Message } from \"./Message\";\nimport { DateDivider } from \"./DateDivider\";\nimport styles from \"./Messages.module.css\";\n\nexport type MessagesProps = {\n  conversation: CachedConversation;\n  /**\n   * What's the client's wallet address?\n   */\n  clientAddress?: string;\n  /**\n   * Are the messages loading?\n   */\n  isLoading?: boolean;\n  /**\n   * What messages should be displayed?\n   */\n  messages?: CachedMessage[];\n};\n\n// TODO: account for messages sent at the same time\nconst hasMessageReadAfter = (\n  messages: CachedMessage[],\n  afterSent: Date,\n  readReceipt: Date,\n) =>\n  messages.some(\n    (message) =>\n      isAfter(message.sentAt, afterSent) &&\n      isBefore(message.sentAt, readReceipt),\n  );\n\nexport const Messages: React.FC<MessagesProps> = ({\n  clientAddress = \"\",\n  conversation,\n  isLoading = false,\n  messages = [],\n}) => {\n  const outgoingMessages = useMemo(\n    () => messages.filter((message) => message.senderAddress === clientAddress),\n    [messages, clientAddress],\n  );\n\n  if (isLoading && !messages.length) {\n    return (\n      <div className={styles.loading}>\n        {Array.from({ length: 3 }).map((_, idx) => (\n          <Fragment key={idx}>\n            <MessageSkeletonLoader incoming={false} /> <MessageSkeletonLoader />\n          </Fragment>\n        ))}\n      </div>\n    );\n  }\n\n  const renderedDates: Date[] = [];\n  const readReceipt = getReadReceipt(conversation);\n\n  return (\n    <div data-testid=\"message-tile-container\" className={styles.wrapper}>\n      {messages.map((message, idx, filteredMessages) => {\n        if (renderedDates.length === 0) {\n          renderedDates.push(message.sentAt);\n        }\n        const lastRenderedDate = renderedDates.at(-1) as Date;\n        const isIncoming = message.senderAddress !== clientAddress;\n        const isOutgoing = message.senderAddress === clientAddress;\n        const isFirstMessage = idx === 0;\n        const isLastMessage = idx === filteredMessages.length - 1;\n        const isSameDate = isSameDay(lastRenderedDate, message.sentAt);\n        const shouldDisplayDate =\n          isFirstMessage || isLastMessage || !isSameDate;\n\n        if (shouldDisplayDate && !isLastMessage) {\n          renderedDates.push(message.sentAt);\n        }\n\n        // determine if this message should display a read receipt, which\n        // we only want to display on the last read outgoing message\n        const isRead =\n          // conversation must have a valid read receipt, and...\n          readReceipt &&\n          // this message must be outgoing, and...\n          isOutgoing &&\n          // this message must be sent before the read receipt, and...\n          isBefore(message.sentAt, readReceipt) &&\n          // this message is the last message, or...\n          (isLastMessage ||\n            // the next outgoing message was sent after the read receipt\n            !hasMessageReadAfter(\n              outgoingMessages,\n              message.sentAt,\n              readReceipt,\n            ));\n\n        return (\n          <Fragment key={message.id}>\n            {shouldDisplayDate && (\n              <DateDivider date={renderedDates.at(-1) as Date} />\n            )}\n            <Message\n              key={message.id}\n              conversation={conversation}\n              message={message}\n              isIncoming={isIncoming}\n              isRead={isRead}\n            />\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n};\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/SkeletonLoaders/MessageSkeletonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_igutw_1 pulse\",\"section\":\"_section_igutw_5\",\"sectionRight\":\"_sectionRight_igutw_11\",\"element\":\"_element_igutw_16\",\"elementSmall\":\"_elementSmall_igutw_22\",\"elementMedium\":\"_elementMedium_igutw_26\",\"elementLarge\":\"_elementLarge_igutw_30\",\"elementLast\":\"_elementLast_igutw_34\"}","import styles from \"./MessageSkeletonLoader.module.css\";\n\nexport const MessageSkeletonLoader = ({ incoming = true }) => (\n  <div role=\"status\" className={styles.wrapper}>\n    {incoming ? (\n      <div className={styles.section}>\n        <div className={`${styles.element} ${styles.elementSmall}`} />\n        <div className={`${styles.element} ${styles.elementLarge}`} />\n        <div className={`${styles.element} ${styles.elementMedium}`} />\n        <div className={`${styles.element} ${styles.elementLast}`} />\n      </div>\n    ) : (\n      <div className={`${styles.section} ${styles.sectionRight}`}>\n        <div className={`${styles.element} ${styles.elementSmall}`} />\n        <div className={`${styles.element} ${styles.elementLarge}`} />\n        <div className={`${styles.element} ${styles.elementMedium}`} />\n        <div className={`${styles.element} ${styles.elementLast}`} />\n      </div>\n    )}\n  </div>\n);\n","import { format } from \"date-fns\";\nimport { ContentTypeId } from \"@xmtp/react-sdk\";\nimport type { CachedConversation, CachedMessage } from \"@xmtp/react-sdk\";\nimport { ContentTypeReply } from \"@xmtp/content-type-reply\";\nimport styles from \"./Message.module.css\";\nimport { MessageContent } from \"./MessageContent\";\nimport { ReplyContent } from \"./ReplyContent\";\nimport { ReactionsBar } from \"./ReactionsBar\";\nimport { ReactionsContent } from \"./ReactionsContent\";\n\nexport type MessageProps = {\n  conversation: CachedConversation;\n  /**\n   * The message to display\n   */\n  message: CachedMessage;\n  /**\n   * Is this an incoming message?\n   */\n  isIncoming?: boolean;\n  isRead?: boolean;\n};\n\nexport const Message: React.FC<MessageProps> = ({\n  conversation,\n  message,\n  isIncoming,\n  isRead,\n}) => {\n  const contentType = ContentTypeId.fromString(message.contentType);\n  return (\n    <div\n      className={`${styles.wrapper} ${styles[isIncoming ? \"left\" : \"right\"]}`}>\n      {contentType.sameAs(ContentTypeReply) ? (\n        <ReplyContent message={message} isIncoming={isIncoming} />\n      ) : (\n        <MessageContent message={message} isIncoming={isIncoming} />\n      )}\n      <div className={styles.time} title={message.sentAt.toLocaleString()}>\n        {isRead && <span className={styles.readReceipt}>Read</span>}\n        <span>{format(message.sentAt, \"h:mm a\")}</span>\n      </div>\n      <div className={styles.reactions}>\n        <ReactionsBar conversation={conversation} message={message} />\n      </div>\n      <ReactionsContent conversation={conversation} message={message} />\n    </div>\n  );\n};\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/Message.module.css\"; export default {\"wrapper\":\"_wrapper_hnmk8_1\",\"left\":\"_left_hnmk8_11\",\"right\":\"_right_hnmk8_15\",\"content\":\"_content_hnmk8_19\",\"time\":\"_time_hnmk8_27\",\"readReceipt\":\"_readReceipt_hnmk8_36\",\"reactions\":\"_reactions_hnmk8_40\"}","import { ContentTypeId, ContentTypeText } from \"@xmtp/react-sdk\";\nimport type { CachedMessage } from \"@xmtp/react-sdk\";\nimport {\n  ContentTypeAttachment,\n  ContentTypeRemoteAttachment,\n} from \"@xmtp/content-type-remote-attachment\";\nimport { AttachmentContent } from \"./AttachmentContent\";\nimport styles from \"./MessageContent.module.css\";\n\nexport type MessageContentProps = {\n  message: CachedMessage;\n  isIncoming?: boolean;\n  isRepliedTo?: boolean;\n};\n\nexport const MessageContent: React.FC<MessageContentProps> = ({\n  message,\n  isIncoming,\n  isRepliedTo,\n}) => {\n  const contentType = ContentTypeId.fromString(message.contentType);\n  let content: any;\n\n  // text messages\n  if (contentType.sameAs(ContentTypeText)) {\n    if (typeof message.content === \"string\")\n      content =\n        typeof message.content === \"string\" ? message.content : undefined;\n  }\n\n  // attachment messages\n  if (\n    contentType.sameAs(ContentTypeAttachment) ||\n    contentType.sameAs(ContentTypeRemoteAttachment)\n  ) {\n    content = <AttachmentContent message={message} />;\n  }\n\n  return (\n    <div\n      className={`${styles.content} ${styles[isIncoming ? \"left\" : \"right\"]} ${\n        isRepliedTo ? styles.original : \"\"\n      }`}\n      data-testid=\"message-tile-text\">\n      {content ??\n        message.contentFallback ??\n        \"This content is not supported by this client\"}\n    </div>\n  );\n};\n","import type { Attachment } from \"@xmtp/content-type-remote-attachment\";\nimport type { CachedMessage } from \"@xmtp/react-sdk\";\nimport { useAttachment } from \"@xmtp/react-sdk\";\nimport styles from \"./Attachment.module.css\";\n\nexport type AttachmentProps = {\n  message: CachedMessage;\n};\n\n/**\n * Creating object URLs from blobs is non-deterministic, so we store the\n * generated URLs in a cache so that they can be reused, which results in\n * a more consistent rendering of images/data and less memory usage.\n */\nconst blobCache = new WeakMap<Uint8Array, string>();\n\nconst getBlobURL = (attachment: Attachment) => {\n  if (!blobCache.get(attachment.data)) {\n    blobCache.set(\n      attachment.data,\n      URL.createObjectURL(\n        new Blob([Buffer.from(attachment.data)], {\n          type: attachment.mimeType,\n        }),\n      ),\n    );\n  }\n\n  return blobCache.get(attachment.data)!;\n};\n\nexport const AttachmentContent: React.FC<AttachmentProps> = ({ message }) => {\n  const { attachment, status } = useAttachment(message);\n\n  if (status === \"error\") {\n    return \"Unable to load attachment\";\n  }\n\n  if (status === \"loading\" || !attachment) {\n    return \"Loading...\";\n  }\n\n  const blobURL = getBlobURL(attachment);\n\n  if (attachment.mimeType.startsWith(\"image/\")) {\n    return (\n      <div className={styles.attachment}>\n        <img src={blobURL} alt=\"\" />\n      </div>\n    );\n  }\n\n  if (attachment.mimeType.startsWith(\"audio/\")) {\n    return (\n      // eslint-disable-next-line jsx-a11y/media-has-caption\n      <audio controls src={blobURL}>\n        <a href={blobURL}>Download instead</a>\n      </audio>\n    );\n  }\n\n  if (attachment.mimeType.startsWith(\"video/\")) {\n    return (\n      // eslint-disable-next-line jsx-a11y/media-has-caption\n      <video controls autoPlay>\n        <source src={blobURL} type=\"video/mp4\" />\n        Video messages not supported.\n      </video>\n    );\n  }\n\n  return (\n    <div>\n      <a href={blobURL} target=\"_blank\" rel=\"noopener noreferrer\">\n        {attachment.filename}\n      </a>\n    </div>\n  );\n};\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/Attachment.module.css\"; export default {\"attachment\":\"_attachment_m6zqf_1\"}","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/MessageContent.module.css\"; export default {\"content\":\"_content_9xkgj_1\",\"left\":\"_left_9xkgj_10\",\"right\":\"_right_9xkgj_15\",\"original\":\"_original_9xkgj_21\"}","import type { CachedMessage } from \"@xmtp/react-sdk\";\nimport { ContentTypeId, useReply } from \"@xmtp/react-sdk\";\nimport type { Reply } from \"@xmtp/content-type-reply\";\nimport { MessageContent } from \"./MessageContent\";\n\nexport type ReplyProps = {\n  message: CachedMessage;\n  isIncoming?: boolean;\n};\n\nexport const ReplyContent: React.FC<ReplyProps> = ({ message, isIncoming }) => {\n  const { originalMessage } = useReply(message);\n\n  const reply = message.content as Reply;\n  const replyMessage = {\n    ...message,\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    content: reply.content,\n    contentType: new ContentTypeId(reply.contentType).toString(),\n  } satisfies CachedMessage;\n\n  return (\n    <>\n      <div>\n        {originalMessage ? (\n          <MessageContent\n            message={originalMessage}\n            isIncoming={isIncoming}\n            isRepliedTo\n          />\n        ) : (\n          \"Loading original message...\"\n        )}\n      </div>\n      <div>\n        <MessageContent message={replyMessage} isIncoming={isIncoming} />\n      </div>\n    </>\n  );\n};\n","import { useSendMessage } from \"@xmtp/react-sdk\";\nimport type { CachedMessage, CachedConversation } from \"@xmtp/react-sdk\";\nimport { useCallback } from \"react\";\nimport {\n  ContentTypeReaction,\n  type Reaction,\n} from \"@xmtp/content-type-reaction\";\nimport styles from \"./ReactionsBar.module.css\";\n\nexport type ReactionsBarProps = {\n  conversation: CachedConversation;\n  message: CachedMessage;\n};\n\nconst availableReactionEmojis = [\"👍\", \"👎\", \"❤️\"];\n\nexport const ReactionsBar: React.FC<ReactionsBarProps> = ({\n  conversation,\n  message,\n}) => {\n  const { sendMessage } = useSendMessage();\n  const handleClick = useCallback(\n    (emoji: string) => {\n      void sendMessage<Reaction>(\n        conversation,\n        {\n          content: emoji,\n          schema: \"unicode\",\n          reference: message.xmtpID,\n          action: \"added\",\n        },\n        ContentTypeReaction,\n      );\n    },\n    [conversation, message.xmtpID, sendMessage],\n  );\n\n  return (\n    <div className={styles.wrapper}>\n      {availableReactionEmojis.map((emoji) => (\n        <button\n          type=\"button\"\n          key={emoji}\n          className={styles.option}\n          onClick={() => handleClick(emoji)}>\n          <span className={styles.emoji}>{emoji}</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/ReactionsBar.module.css\"; export default {\"wrapper\":\"_wrapper_l3px9_1\",\"option\":\"_option_l3px9_11\"}","import {\n  type CachedConversation,\n  type CachedMessage,\n  useSendMessage,\n  useClient,\n  useReactions,\n} from \"@xmtp/react-sdk\";\nimport { useCallback, useMemo } from \"react\";\nimport type { Reaction } from \"@xmtp/content-type-reaction\";\nimport { ContentTypeReaction } from \"@xmtp/content-type-reaction\";\nimport styles from \"./ReactionsContent.module.css\";\n\nexport type ReactionsContentProps = {\n  conversation: CachedConversation;\n  message: CachedMessage;\n};\n\nconst availableReactionEmojis = [\"👍\", \"👎\", \"❤️\"];\n\nexport const ReactionsContent: React.FC<ReactionsContentProps> = ({\n  conversation,\n  message,\n}) => {\n  const { client } = useClient();\n  const { sendMessage } = useSendMessage();\n  const reactions = useReactions(message);\n\n  const emojiReactions = useMemo(\n    () =>\n      reactions\n        .filter((reaction) => reaction.schema === \"unicode\")\n        .reduce(\n          (acc, reaction) => {\n            const count = (acc?.[reaction.content]?.count ?? 0) + 1;\n            const senderAddresses =\n              acc?.[reaction.content]?.senderAddresses ?? [];\n            return {\n              ...acc,\n              [reaction.content]: {\n                count,\n                senderAddresses: [...senderAddresses, reaction.senderAddress],\n              },\n            };\n          },\n          {} as Record<\n            string,\n            {\n              count: number;\n              senderAddresses: string[];\n            }\n          >,\n        ),\n    [reactions],\n  );\n\n  const emojiCount = useCallback(\n    (emoji: string) => emojiReactions[emoji]?.count ?? 0,\n    [emojiReactions],\n  );\n\n  const handleClick = useCallback(\n    (emoji: string) => {\n      const hasReacted = emojiReactions[emoji].senderAddresses.includes(\n        client?.address ?? \"\",\n      );\n      void sendMessage<Reaction>(\n        conversation,\n        {\n          content: emoji,\n          schema: \"unicode\",\n          reference: message.xmtpID,\n          action: hasReacted ? \"removed\" : \"added\",\n        },\n        ContentTypeReaction,\n      );\n    },\n    [\n      client?.address,\n      conversation,\n      emojiReactions,\n      message.xmtpID,\n      sendMessage,\n    ],\n  );\n\n  return (\n    reactions.length > 0 && (\n      <div className={styles.wrapper}>\n        {availableReactionEmojis.map((emoji) => {\n          const count = emojiCount(emoji);\n          return count > 0 ? (\n            <button\n              type=\"button\"\n              key={emoji}\n              className={`${styles.option} ${styles.active}`}\n              onClick={() => handleClick(emoji)}>\n              <span className={styles.emoji}>{emoji}</span>\n              <span className={styles.count}>{count}</span>\n            </button>\n          ) : null;\n        })}\n      </div>\n    )\n  );\n};\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/ReactionsContent.module.css\"; export default {\"wrapper\":\"_wrapper_1i67j_1\",\"option\":\"_option_1i67j_8\",\"count\":\"_count_1i67j_23\",\"active\":\"_active_1i67j_28\"}","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/Messages.module.css\"; export default {\"wrapper\":\"_wrapper_9g5he_1\",\"loading\":\"_loading_9g5he_8\",\"beginning\":\"_beginning_9g5he_15\"}","import { PlusCircleIcon } from \"@heroicons/react/24/outline\";\nimport { ButtonLoader } from \"./Loaders/ButtonLoader\";\nimport styles from \"./IconButton.module.css\";\n\nexport type IconButtonProps = {\n  /**\n   * What are the button contents?\n   */\n  label: React.ReactNode;\n  /**\n   * Is this a round or message shape of the button?\n   */\n  variant?: \"primary\" | \"secondary\";\n  /**\n   * How large is this button?\n   */\n  size?: \"small\" | \"large\";\n  /**\n   * Should the button display a loading state?\n   */\n  isLoading?: boolean;\n  /**\n   * Should the button be disabled?\n   */\n  isDisabled?: boolean;\n  /**\n   * Optional click handler\n   */\n  onClick?: () => void;\n  /**\n   * What should the screen reader text show?\n   */\n  srText?: string;\n  /**\n   * What is the test id associated with this button?\n   */\n  testId?: string;\n};\n\n/**\n * Icon-only button component\n */\nexport const IconButton: React.FC<IconButtonProps> = ({\n  label = <PlusCircleIcon width=\"24\" color=\"white\" />,\n  variant = \"primary\",\n  isLoading = false,\n  isDisabled = false,\n  size = \"large\",\n  srText,\n  onClick,\n  testId,\n}) => (\n  <button\n    data-testid={testId}\n    type=\"button\"\n    onClick={onClick}\n    disabled={isDisabled}\n    className={`${styles.wrapper} ${styles[variant]} ${\n      isDisabled ? styles.disabled : \"\"\n    }`}\n    aria-label={srText}>\n    <div>\n      {isLoading ? <ButtonLoader color=\"primary\" size={size} /> : label}\n    </div>\n  </button>\n);\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/Loaders/ButtonLoader.module.css\"; export default {\"wrapper\":\"_wrapper_133pc_3\",\"light\":\"_light_133pc_7\",\"dark\":\"_dark_133pc_11\",\"element\":\"_element_133pc_15 spin\",\"elementSmall\":\"_elementSmall_133pc_22\",\"elementLarge\":\"_elementLarge_133pc_28\"}","import styles from \"./ButtonLoader.module.css\";\n\nexport type ButtonLoaderProps = {\n  /**\n   * What color should the loader/spinner be?\n   */\n  color?: \"primary\" | \"secondary\";\n  /**\n   * How large is this button?\n   */\n  size?: \"small\" | \"large\";\n};\n\n/**\n * Primary UI component for user interaction\n */\nexport const ButtonLoader: React.FC<ButtonLoaderProps> = ({\n  size,\n  color = \"primary\",\n}) => (\n  <div className={styles.wrapper}>\n    <div\n      className={`${styles.element} ${\n        color === \"primary\" ? styles.light : styles.dark\n      } ${size === \"small\" ? styles.elementSmall : styles.elementLarge}`}\n    />\n  </div>\n);\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/IconButton.module.css\"; export default {\"wrapper\":\"_wrapper_7iqve_1\",\"disabled\":\"_disabled_7iqve_19\",\"primary\":\"_primary_7iqve_28\",\"secondary\":\"_secondary_7iqve_36\"}","import type { ChangeEvent, KeyboardEvent } from \"react\";\nimport {\n  useCallback,\n  forwardRef,\n  useImperativeHandle,\n  useState,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\nimport { ArrowUpIcon } from \"@heroicons/react/24/solid\";\nimport { IconButton } from \"./IconButton\";\nimport styles from \"./MessageInput.module.css\";\n\nexport type MessageInputProps = {\n  /**\n   * Is the CTA button disabled?\n   */\n  isDisabled?: boolean;\n  /**\n   * What happens on a submit?\n   */\n  onSubmit?: (msg: string) => Promise<void>;\n  /**\n   * What, if any, placeholder should we use for the input?\n   */\n  placeholder?: string;\n  /**\n   * What, if any, screen reader text should be used for the submit button\n   */\n  submitSrText?: string;\n};\n\nconst MIN_TEXTAREA_HEIGHT = 32;\n\nexport const MessageInput = forwardRef<HTMLTextAreaElement, MessageInputProps>(\n  ({ isDisabled, onSubmit, placeholder, submitSrText }, ref) => {\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n    // make external ref point to internal ref\n    useImperativeHandle<HTMLTextAreaElement | null, HTMLTextAreaElement | null>(\n      ref,\n      () => textAreaRef.current,\n    );\n    const [value, setValue] = useState(\"\");\n    const onChange = (event: ChangeEvent<HTMLTextAreaElement>) =>\n      setValue(event.target.value);\n\n    const handleKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        if (event.key === \"Enter\" && !event.shiftKey) {\n          event.preventDefault();\n          if (value) {\n            void onSubmit?.(value);\n            setValue(\"\");\n          }\n        }\n      },\n      [onSubmit, value],\n    );\n\n    const handleClick = useCallback(() => {\n      if (value) {\n        void onSubmit?.(value);\n        setValue(\"\");\n      }\n    }, [onSubmit, value]);\n\n    useLayoutEffect(() => {\n      if (textAreaRef?.current?.value) {\n        const currentScrollHeight = textAreaRef?.current.scrollHeight;\n        textAreaRef.current.style.height = `${Math.max(\n          currentScrollHeight,\n          MIN_TEXTAREA_HEIGHT,\n        )}px`;\n      } else if (textAreaRef?.current) {\n        textAreaRef.current.style.height = `${MIN_TEXTAREA_HEIGHT}px`;\n      }\n    }, [value]);\n\n    return (\n      <div>\n        {placeholder && (\n          <label htmlFor=\"chat\" className={styles.label}>\n            {placeholder}\n          </label>\n        )}\n        <div className={styles.wrapper}>\n          <textarea\n            name=\"chat\"\n            data-testid=\"message-input\"\n            onChange={onChange}\n            onKeyDown={handleKeyDown}\n            ref={textAreaRef}\n            rows={1}\n            className={styles.input}\n            placeholder={placeholder}\n            value={value}\n            disabled={isDisabled}\n          />\n          <IconButton\n            testId=\"message-input-submit\"\n            variant=\"secondary\"\n            label={<ArrowUpIcon color=\"white\" width=\"20\" />}\n            srText={submitSrText}\n            onClick={handleClick}\n            isDisabled={!value || isDisabled}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nMessageInput.displayName = \"MessageInput\";\n","import \"/Users/rubenwolff/workspace/ethOnline2023/dili-frontend/frontend/packages/xmtp-react-components/src/components/MessageInput.module.css\"; export default {\"label\":\"_label_1wlh2_1 visually-hidden\",\"wrapper\":\"_wrapper_1wlh2_5\",\"input\":\"_input_1wlh2_19\"}","import type { KeyboardEvent } from \"react\";\nimport { useCallback } from \"react\";\nimport { formatDistanceToNowStrict } from \"date-fns\";\nimport {\n  type CachedConversation,\n  type CachedMessage,\n  getAttachment,\n} from \"@xmtp/react-sdk\";\nimport { Avatar } from \"./Avatar\";\nimport styles from \"./ConversationPreviewCard.module.css\";\nimport { shortAddress } from \"../helpers/shortAddress\";\nimport { Link } from \"react-router-dom\";\n\nexport type ConversationPreviewCardProps = {\n  /**\n   * Conversation to preview\n   */\n  conversation: CachedConversation;\n  /**\n   * What is the last message of this conversation?\n   */\n  lastMessage?: CachedMessage;\n  /**\n   * What happens on message click?\n   */\n  onClick?: (conversation: CachedConversation) => void;\n  /**\n   * Is conversation selected?\n   */\n  isSelected?: boolean;\n};\n\nexport const ConversationPreviewCard: React.FC<\n  ConversationPreviewCardProps\n> = ({ conversation, onClick, isSelected, lastMessage }) => {\n  const attachment = lastMessage ? getAttachment(lastMessage) : undefined;\n  let content: any;\n  if (attachment) {\n    content = attachment.filename;\n  } else if (typeof lastMessage?.content === \"string\") {\n    content = lastMessage.content;\n  } else if (lastMessage?.contentFallback) {\n    content = lastMessage.contentFallback;\n  }\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Enter\") {\n        onClick?.(conversation);\n      }\n    },\n    [conversation, onClick],\n  );\n\n  const handleClick = useCallback(() => {\n    onClick?.(conversation);\n  }, [conversation, onClick]);\n\n  return (\n    <div\n      className={`${styles.wrapper} ${isSelected ? styles.selected : \"\"}`}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      onClick={handleClick}>\n      <Link to={`/profile/${conversation.peerAddress}`}>\n      <Avatar address={conversation.peerAddress} />\n      </Link>\n      <div className={styles.element}>\n        <div className={styles.address}>\n          {shortAddress(conversation.peerAddress)}\n        </div>\n        <div className={styles.message}>{content}</div>\n      </div>\n      <div className={styles.time}>\n        {lastMessage?.sentAt &&\n          `${formatDistanceToNowStrict(lastMessage.sentAt)} ago`}\n      </div>\n    </div>\n  );\n};\n","/**\n * Shorten a wallet address that is more than 10 characters.\n * Address must start with `0x`.\n */\nexport const shortAddress = (addr: string): string =>\n  addr.length > 10 && addr.startsWith(\"0x\")\n    ? `${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`\n    : addr;\n","import type { CachedConversation, CachedMessage } from \"@xmtp/react-sdk\";\nimport { useCallback } from \"react\";\nimport { ConversationPreviewCard } from \"../components/ConversationPreviewCard\";\n\nexport type ConversationPreviewProps = {\n  /**\n   * Conversation to preview\n   */\n  conversation: CachedConversation;\n  /**\n   * Is conversation selected?\n   */\n  isSelected?: boolean;\n  /**\n   * What happens when you click on the conversation?\n   */\n  onClick?: (conversation: CachedConversation) => void;\n  /**\n   * Preview text to display\n   */\n  lastMessage?: CachedMessage;\n};\n\n/**\n * This component fetches the most recent conversation message and uses it to\n * render a conversation preview.\n */\nexport const ConversationPreview: React.FC<ConversationPreviewProps> = ({\n  conversation,\n  isSelected,\n  onClick,\n  lastMessage,\n}) => {\n  const handlePreviewClick = useCallback(() => {\n    onClick?.(conversation);\n  }, [conversation, onClick]);\n\n  return (\n    <ConversationPreviewCard\n      conversation={conversation}\n      isSelected={isSelected}\n      onClick={handlePreviewClick}\n      lastMessage={lastMessage}\n    />\n  );\n};\n","import type { CachedConversation } from \"@xmtp/react-sdk\";\nimport { ConversationPreview } from \"./ConversationPreview\";\nimport type { ConversationListProps } from \"../components/ConversationList\";\nimport { ConversationList } from \"../components/ConversationList\";\n\nexport type ConversationPreviewListProps = Pick<\n  ConversationListProps,\n  \"isLoading\" | \"renderEmpty\"\n> & {\n  /**\n   * What conversations should we render?\n   */\n  conversations?: CachedConversation[];\n  /**\n   * What happens when a conversation is clicked?\n   */\n  onConversationClick?: (conversation: CachedConversation) => void;\n  /**\n   * What, if any, conversation is selected\n   */\n  selectedConversation?: CachedConversation;\n};\n\n/**\n * This component sorts conversations by most recent, then lists them as\n * conversation previews, which include the conversation's first message.\n */\nexport const ConversationPreviewList: React.FC<\n  ConversationPreviewListProps\n> = ({\n  conversations = [],\n  isLoading,\n  onConversationClick,\n  renderEmpty,\n  selectedConversation,\n}) => {\n  const conversationPreviews = conversations.map((conversation) => (\n    <ConversationPreview\n      key={conversation.topic}\n      conversation={conversation}\n      isSelected={conversation.topic === selectedConversation?.topic}\n      onClick={onConversationClick}\n    />\n  ));\n  return (\n    <ConversationList\n      conversations={conversationPreviews}\n      isLoading={isLoading}\n      renderEmpty={renderEmpty}\n    />\n  );\n};\n"]}